<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [F407_Std\F407_Std.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image F407_Std\F407_Std.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Oct 11 16:25:34 2022
<BR><P>
<H3>Maximum Stack Usage =        348 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
imu_sensor_init &rArr; BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">HardFault_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[73]">StartMonitorTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">StartMonitorTask</a><BR>
 <LI><a href="#[fd]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fd]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[73]">StartMonitorTask</a> from freertos.o(i.StartMonitorTask) referenced from freertos.o(.constdata)
 <LI><a href="#[12]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[38]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[67]">dma_m0_rxcplt_callback</a> from drv_uart.o(i.dma_m0_rxcplt_callback) referenced from drv_uart.o(i.DMAEx_MultiBufferStart_NoIT)
 <LI><a href="#[68]">dma_m1_rxcplt_callback</a> from drv_uart.o(i.dma_m1_rxcplt_callback) referenced from drv_uart.o(i.DMAEx_MultiBufferStart_NoIT)
 <LI><a href="#[3]">imu_sensor_check</a> from imu_sensor.o(i.imu_sensor_check) referenced 2 times from imu_sensor.o(.data)
 <LI><a href="#[4]">imu_sensor_heart_beat</a> from imu_sensor.o(i.imu_sensor_heart_beat) referenced 2 times from imu_sensor.o(.data)
 <LI><a href="#[1]">imu_sensor_init</a> from imu_potocol.o(i.imu_sensor_init) referenced 2 times from imu_sensor.o(.data)
 <LI><a href="#[2]">imu_sensor_update</a> from imu_potocol.o(i.imu_sensor_update) referenced 2 times from imu_sensor.o(.data)
 <LI><a href="#[64]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6f]">pid_calculate</a> from dji_pid.o(i.pid_calculate) referenced from dji_pid.o(i.pid_init)
 <LI><a href="#[6d]">pid_param_init</a> from dji_pid.o(i.pid_param_init) referenced from dji_pid.o(i.pid_init)
 <LI><a href="#[6e]">pid_reset</a> from dji_pid.o(i.pid_reset) referenced from dji_pid.o(i.pid_init)
 <LI><a href="#[71]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[70]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[7]">rc_sensor_check</a> from rc_sensor.o(i.rc_sensor_check) referenced 2 times from rc_sensor.o(.data)
 <LI><a href="#[8]">rc_sensor_heart_beat</a> from rc_sensor.o(i.rc_sensor_heart_beat) referenced 2 times from rc_sensor.o(.data)
 <LI><a href="#[5]">rc_sensor_init</a> from rc_potocol.o(i.rc_sensor_init) referenced 2 times from rc_sensor.o(.data)
 <LI><a href="#[6]">rc_sensor_update</a> from rc_potocol.o(i.rc_sensor_update) referenced 2 times from rc_sensor.o(.data)
 <LI><a href="#[6c]">user_delay_us</a> from bmi2_common.o(i.user_delay_us) referenced from bmi2_common.o(i.bmi2_interface_selection)
 <LI><a href="#[6a]">user_i2c_reg_read</a> from bmi2_common.o(i.user_i2c_reg_read) referenced from bmi2_common.o(i.bmi2_interface_selection)
 <LI><a href="#[6b]">user_i2c_reg_write</a> from bmi2_common.o(i.user_i2c_reg_write) referenced from bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[87]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1df]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1db]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1e6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ea]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1eb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ec]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1ee]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[7f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ef]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1f0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>ALL_Motor_Pid_Clear</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motor.o(i.ALL_Motor_Pid_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ALL_Motor_Pid_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMB_Motor_Pid_Clear
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Motor_Pid_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
</UL>

<P><STRONG><a name="[123]"></a>Angle_Logic_Judge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, judge.o(i.Angle_Logic_Judge))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Judge
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_check
</UL>

<P><STRONG><a name="[8f]"></a>BMI_Get_EulerAngle</STRONG> (Thumb, 1116 bytes, Stack size 64 bytes, bmi.o(i.BMI_Get_EulerAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inVSqrt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[96]"></a>BMI_Get_GRO</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bmi.o(i.BMI_Get_GRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BMI_Get_GRO &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
</UL>

<P><STRONG><a name="[98]"></a>BMI_Get_RawData</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bmi.o(i.BMI_Get_RawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BMI_Get_RawData &rArr; MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[9a]"></a>BMI_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bmi.o(i.BMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_selection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>CAN1_Init</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, drv_can.o(i.CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_ParamsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CAN1_rxDataHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, motor.o(i.CAN1_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Motor_Update
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Motor_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[aa]"></a>CAN2_Init</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, drv_can.o(i.CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN2_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_ParamsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CAN2_rxDataHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motor.o(i.CAN2_rxDataHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RP_CAN_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[af]"></a>CAN_SendData</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_can.o(i.CAN_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Send
</UL>

<P><STRONG><a name="[131]"></a>CHASSIS_Motor_Cut</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, motor.o(i.CHASSIS_Motor_Cut))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
</UL>

<P><STRONG><a name="[a8]"></a>CHASSIS_Motor_Update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor.o(i.CHASSIS_Motor_Update))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_rxDataHandler
</UL>

<P><STRONG><a name="[8d]"></a>CHAS_Motor_Pid_Clear</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, motor.o(i.CHAS_Motor_Pid_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Motor_Pid_Clear
</UL>

<P><STRONG><a name="[19e]"></a>DEV_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, device.o(i.DEV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DEV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DRIVER_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.DRIVER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DRIVER_Init &rArr; CAN2_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>DRV_UART_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_uart.o(i.DRV_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_UART_IRQHandler &rArr; uart_rx_idle_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[132]"></a>GIMBAL_Motor_Cut</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, motor.o(i.GIMBAL_Motor_Cut))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
</UL>

<P><STRONG><a name="[a9]"></a>GIMBAL_Motor_Update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor.o(i.GIMBAL_Motor_Update))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_rxDataHandler
</UL>

<P><STRONG><a name="[8e]"></a>GIMB_Motor_Pid_Clear</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, motor.o(i.GIMB_Motor_Pid_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Judge
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Motor_Pid_Clear
</UL>

<P><STRONG><a name="[199]"></a>Get_Symbol</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, chassis.o(i.Get_Symbol))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
</UL>

<P><STRONG><a name="[b9]"></a>Gimbal_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gimbal.o(i.Gimbal_Init))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMB_Motor_Pid_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Judge
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_check
</UL>

<P><STRONG><a name="[10f]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>

<P><STRONG><a name="[a3]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[a6]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_can.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>HAL_CAN_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dac.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[d3]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[be]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
</UL>

<P><STRONG><a name="[119]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_calculate
</UL>

<P><STRONG><a name="[fa]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d7]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>HAL_InitTick</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[cf]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[d8]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[dc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[ff]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_UART_MspInit</STRONG> (Thumb, 740 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>IIC_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[108]"></a>IIC_NAck</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[109]"></a>IIC_Read_Byte</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, soft_iic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[10a]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, soft_iic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[10b]"></a>IIC_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[10c]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, soft_iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[10d]"></a>IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[97]"></a>MPU_Read_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bmi2_common.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_read
</UL>

<P><STRONG><a name="[99]"></a>MPU_Read_all</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bmi2_common.o(i.MPU_Read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
</UL>

<P><STRONG><a name="[10e]"></a>MX_ADC1_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>MX_CAN1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>MX_CAN2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>MX_DAC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>MX_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>MX_GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>MX_TIM1_Init</STRONG> (Thumb, 194 bytes, Stack size 96 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>MX_TIM3_Init</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>MX_UART4_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>MX_UART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>Mode_Judge</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, judge.o(i.Mode_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mode_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Logic_Judge
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMB_Motor_Pid_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[124]"></a>Motor_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Motor_Init &rArr; CAN2_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_pid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>Motor_Send</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, motor.o(i.Motor_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Motor_Send &rArr; Motor_info_update &rArr; chassis_update &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_check
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_info_update
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_check
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMonitorTask
</UL>

<P><STRONG><a name="[12b]"></a>Motor_TotalAngleCal_GM6020</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, motor.o(i.Motor_TotalAngleCal_GM6020))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_TotalAngleCal_GM6020
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_info_update
</UL>

<P><STRONG><a name="[12a]"></a>Motor_check</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, motor.o(i.Motor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_check
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Send
</UL>

<P><STRONG><a name="[128]"></a>Motor_info_update</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, motor.o(i.Motor_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Motor_info_update &rArr; chassis_update &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TotalAngleCal_GM6020
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Send
</UL>

<P><STRONG><a name="[126]"></a>Motor_pid_init</STRONG> (Thumb, 542 bytes, Stack size 64 bytes, motor.o(i.Motor_pid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor_pid_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>PIT_MOTOR_MECHMAX</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gimbal.o(i.PIT_MOTOR_MECHMAX))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_update
</UL>

<P><STRONG><a name="[ac]"></a>RP_CAN_Update</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rp_can.o(i.RP_CAN_Update))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_rxDataHandler
</UL>

<P><STRONG><a name="[130]"></a>Rc_Return_Mid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, judge.o(i.Rc_Return_Mid))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
</UL>

<P><STRONG><a name="[12f]"></a>Rx_Loss_Hand</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, judge.o(i.Rx_Loss_Hand))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Rx_Loss_Hand &rArr; ALL_Motor_Pid_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_Return_Mid
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Motor_Cut
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Motor_Cut
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Motor_Pid_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_check
</UL>

<P><STRONG><a name="[129]"></a>Rx_check</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, judge.o(i.Rx_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Rx_check &rArr; Rx_Loss_Hand &rArr; ALL_Motor_Pid_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_Loss_Hand
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Logic_Judge
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Send
</UL>

<P><STRONG><a name="[a0]"></a>Set_accel</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, bmi.o(i.Set_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[9f]"></a>Set_gyro</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, bmi.o(i.Set_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[72]"></a>StartDefaultTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Judge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>StartMonitorTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartMonitorTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = StartMonitorTask &rArr;  StartMonitorTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMonitorTask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMonitorTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>SystemClock_Config</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f5]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>USART1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_uart.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[1d6]"></a>USART1_rxDataHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(i.USART1_rxDataHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>USART2_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_Init &rArr; DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[19c]"></a>USART2_rxDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rc_potocol.o(i.USART2_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_rxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_m1_rxcplt_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_m0_rxcplt_callback
</UL>

<P><STRONG><a name="[b5]"></a>USART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_uart.o(i.USART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[1d4]"></a>USART4_rxDataHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(i.USART4_rxDataHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[b6]"></a>USART5_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_uart.o(i.USART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[1d5]"></a>USART5_rxDataHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_uart.o(i.USART5_rxDataHandler))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[95]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[145]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[94]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[148]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
</UL>

<P><STRONG><a name="[14c]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_update
</UL>

<P><STRONG><a name="[149]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[14b]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[142]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[14a]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[13d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[146]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[13f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[141]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1f2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[147]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[9d]"></a>bmi270_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bmi270.o(i.bmi270_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[9c]"></a>bmi2_error_codes_print_result</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi2_common.o(i.bmi2_error_codes_print_result))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[16e]"></a>bmi2_extract_input_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.bmi2_extract_input_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
</UL>

<P><STRONG><a name="[14f]"></a>bmi2_get_feat_config</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
</UL>

<P><STRONG><a name="[14e]"></a>bmi2_get_gyro_cross_sense</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[154]"></a>bmi2_get_internal_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bmi2_get_internal_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[151]"></a>bmi2_get_regs</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>

<P><STRONG><a name="[133]"></a>bmi2_get_sensor_config</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, bmi2.o(i.bmi2_get_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[153]"></a>bmi2_get_sensor_data</STRONG> (Thumb, 734 bytes, Stack size 72 bytes, bmi2.o(i.bmi2_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>

<P><STRONG><a name="[17a]"></a>bmi2_get_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[9b]"></a>bmi2_interface_selection</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bmi2_common.o(i.bmi2_interface_selection))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[134]"></a>bmi2_map_data_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_map_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bmi2_map_data_int &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[14d]"></a>bmi2_sec_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bmi2_sec_init &rArr; bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[9e]"></a>bmi2_sensor_enable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = bmi2_sensor_enable &rArr; sensor_enable &rArr; set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[157]"></a>bmi2_set_adv_power_save</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_adv_power_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[150]"></a>bmi2_set_regs</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[135]"></a>bmi2_set_sensor_config</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = bmi2_set_sensor_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[17b]"></a>bmi2_soft_reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>

<P><STRONG><a name="[196]"></a>bmi2_write_config_file</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
</UL>

<P><STRONG><a name="[125]"></a>chassis_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chassis.o(i.chassis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chassis_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[12d]"></a>chassis_update</STRONG> (Thumb, 860 bytes, Stack size 72 bytes, chassis.o(i.chassis_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = chassis_update &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Symbol
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_info_update
</UL>

<P><STRONG><a name="[107]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_haltick.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delay_us
</UL>

<P><STRONG><a name="[143]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[156]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>

<P><STRONG><a name="[12c]"></a>gimbal_update</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, gimbal.o(i.gimbal_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gimbal_update
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MOTOR_MECHMAX
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_info_update
</UL>

<P><STRONG><a name="[1]"></a>imu_sensor_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, imu_potocol.o(i.imu_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = imu_sensor_init &rArr; BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_sensor.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>imu_sensor_update</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, imu_potocol.o(i.imu_sensor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = imu_sensor_update &rArr; BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_sensor.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>inVSqrt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bmi.o(i.inVSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[155]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>

<P><STRONG><a name="[19b]"></a>micros</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_haltick.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[136]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartMonitorTask
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[19f]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[12e]"></a>pid_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dji_pid.o(i.pid_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_pid_init
</UL>

<P><STRONG><a name="[1b2]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1b1]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5]"></a>rc_sensor_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rc_potocol.o(i.rc_sensor_init))
<BR>[Address Reference Count : 1]<UL><LI> rc_sensor.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>rc_sensor_update</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, rc_potocol.o(i.rc_sensor_update))
<BR>[Address Reference Count : 1]<UL><LI> rc_sensor.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[6c]"></a>user_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmi2_common.o(i.user_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = user_delay_us &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[6a]"></a>user_i2c_reg_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bmi2_common.o(i.user_i2c_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = user_i2c_reg_read &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[6b]"></a>user_i2c_reg_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bmi2_common.o(i.user_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = user_i2c_reg_write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[1a6]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d8]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ab]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1b0]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1a8]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1a7]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1aa]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ac]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ae]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1da]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1a0]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1a1]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1b3]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[76]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1a4]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1a3]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[137]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[90]"></a>lsb_to_dps</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bmi.o(i.lsb_to_dps))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[91]"></a>lsb_to_mps2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bmi.o(i.lsb_to_mps2))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[198]"></a>cfg_error_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bmi2.o(i.cfg_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[1d2]"></a>check_boundary_val</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, bmi2.o(i.check_boundary_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[171]"></a>comp_gyro_cross_axis_sensitivity</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bmi2.o(i.comp_gyro_cross_axis_sensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[19a]"></a>config_aux_interface</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bmi2.o(i.config_aux_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[174]"></a>extract_output_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.extract_output_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
</UL>

<P><STRONG><a name="[170]"></a>get_acc_gyr_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bmi2.o(i.get_acc_gyr_data))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[158]"></a>get_accel_config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bmi2.o(i.get_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_accel_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[178]"></a>get_accel_self_test_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_accel_self_test_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_accel_self_test_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[15c]"></a>get_any_motion_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_any_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[15a]"></a>get_aux_config</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bmi2.o(i.get_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_aux_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[169]"></a>get_ext_sens_sync_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_ext_sens_sync_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[168]"></a>get_flat_config</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, bmi2.o(i.get_flat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[16f]"></a>get_free_fall_det_config</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, bmi2.o(i.get_free_fall_det_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[163]"></a>get_glance_detect_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_glance_detect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[159]"></a>get_gyro_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bmi2.o(i.get_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_gyro_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[177]"></a>get_gyro_cross_sense</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[160]"></a>get_gyro_gain_update_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_gain_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[175]"></a>get_gyro_gain_update_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_gyro_gain_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_gyro_gain_update_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[166]"></a>get_high_g_config</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bmi2.o(i.get_high_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[167]"></a>get_low_g_config</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bmi2.o(i.get_low_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[15d]"></a>get_no_motion_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_no_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[176]"></a>get_nvm_error_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bmi2.o(i.get_nvm_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_nvm_error_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[179]"></a>get_ois_output</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bmi2.o(i.get_ois_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[165]"></a>get_orient_config</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bmi2.o(i.get_orient_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[172]"></a>get_remapped_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.get_remapped_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[15b]"></a>get_sig_motion_config</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bmi2.o(i.get_sig_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[15f]"></a>get_step_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_step_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[15e]"></a>get_step_count_params_config</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, bmi2.o(i.get_step_count_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[173]"></a>get_step_counter_output</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bmi2.o(i.get_step_counter_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_step_counter_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[161]"></a>get_tilt_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_tilt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[162]"></a>get_up_hold_to_wake_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_up_hold_to_wake_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[164]"></a>get_wake_up_config</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bmi2.o(i.get_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[16a]"></a>get_wrist_gest_config</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_gest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[16c]"></a>get_wrist_gest_w_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_gest_w_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[16b]"></a>get_wrist_wear_wake_up_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_wear_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[16d]"></a>get_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_wear_wake_up_wh_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[152]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi2.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>

<P><STRONG><a name="[17c]"></a>select_sensor</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, bmi2.o(i.select_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[17d]"></a>sensor_enable</STRONG> (Thumb, 958 bytes, Stack size 56 bytes, bmi2.o(i.sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sensor_enable &rArr; set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[17e]"></a>set_accel_config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bmi2.o(i.set_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = set_accel_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1cf]"></a>set_act_recog</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_act_recog))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_act_recog &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1b8]"></a>set_any_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_any_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_any_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[181]"></a>set_any_motion_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_any_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[180]"></a>set_aux_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bmi2.o(i.set_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_aux_config &rArr; config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1d3]"></a>set_config_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi2.o(i.set_config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_config_load &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[1c3]"></a>set_double_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_double_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_double_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1c9]"></a>set_ext_sens_sync</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_ext_sens_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_ext_sens_sync &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18f]"></a>set_ext_sens_sync_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_ext_sens_sync_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1d0]"></a>set_feat_accel_self_test</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bmi2.o(i.set_feat_accel_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1c8]"></a>set_flat</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_flat &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18e]"></a>set_flat_config</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bmi2.o(i.set_flat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1d1]"></a>set_free_fall_det</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_free_fall_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_free_fall_det &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[195]"></a>set_free_fall_det_config</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, bmi2.o(i.set_free_fall_det_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[189]"></a>set_glance_detect_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_glance_detect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c0]"></a>set_glance_detector</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_glance_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_glance_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[17f]"></a>set_gyro_config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bmi2.o(i.set_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_gyro_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ca]"></a>set_gyro_self_offset_corr</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_gyro_self_offset_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_gyro_self_offset_corr &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1bd]"></a>set_gyro_user_gain</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_gyro_user_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_gyro_user_gain &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[186]"></a>set_gyro_user_gain_config</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi2.o(i.set_gyro_user_gain_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c6]"></a>set_high_g</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_high_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_high_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18c]"></a>set_high_g_config</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, bmi2.o(i.set_high_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c7]"></a>set_low_g</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_low_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_low_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18d]"></a>set_low_g_config</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bmi2.o(i.set_low_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b9]"></a>set_no_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_no_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_no_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[182]"></a>set_no_motion_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_no_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[18b]"></a>set_orient_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_orient_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c5]"></a>set_orientation</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_orientation &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[194]"></a>set_primary_ois_config</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bmi2.o(i.set_primary_ois_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_primary_ois_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b7]"></a>set_sig_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_sig_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[183]"></a>set_sig_motion_config</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bmi2.o(i.set_sig_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c2]"></a>set_single_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_single_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_single_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1bc]"></a>set_step_activity</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_activity &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[185]"></a>set_step_config</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bmi2.o(i.set_step_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[184]"></a>set_step_count_params_config</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bmi2.o(i.set_step_count_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1bb]"></a>set_step_counter</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_counter &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1ba]"></a>set_step_detector</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1be]"></a>set_tilt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_tilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_tilt &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[187]"></a>set_tilt_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_tilt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c4]"></a>set_triple_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_triple_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_triple_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1bf]"></a>set_up_hold_to_wake</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_up_hold_to_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_up_hold_to_wake &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[188]"></a>set_up_hold_to_wake_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_up_hold_to_wake_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c1]"></a>set_wake_up</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18a]"></a>set_wake_up_config</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, bmi2.o(i.set_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = set_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[190]"></a>set_wrist_gest_config</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_gest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[192]"></a>set_wrist_gest_w_config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_gest_w_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1cb]"></a>set_wrist_gesture</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_gesture &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1cd]"></a>set_wrist_gesture_wh</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_gesture_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_gesture_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1cc]"></a>set_wrist_wear_wake_up</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_wear_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[191]"></a>set_wrist_wear_wake_up_config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_wear_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ce]"></a>set_wrist_wear_wake_up_wh</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_wear_wake_up_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_wear_wake_up_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[193]"></a>set_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_wear_wake_up_wh_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1d7]"></a>upload_file</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.upload_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = upload_file &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[197]"></a>write_config_file</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, bmi2.o(i.write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[a2]"></a>CAN_Filter_ParamsInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_can.o(i.CAN_Filter_ParamsInit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[ad]"></a>CAN_Rx_Callback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_can.o(i.CAN_Rx_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_Rx_Callback &rArr; CAN1_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_rxDataHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_rxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[13c]"></a>DMAEx_MultiBufferStart_NoIT</STRONG> (Thumb, 564 bytes, Stack size 36 bytes, drv_uart.o(i.DMAEx_MultiBufferStart_NoIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[13b]"></a>DMA_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, drv_uart.o(i.DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[67]"></a>dma_m0_rxcplt_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(i.dma_m0_rxcplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_m0_rxcplt_callback &rArr; USART2_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_rxDataHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.DMAEx_MultiBufferStart_NoIT)
</UL>
<P><STRONG><a name="[68]"></a>dma_m1_rxcplt_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart.o(i.dma_m1_rxcplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_m1_rxcplt_callback &rArr; USART2_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_rxDataHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.DMAEx_MultiBufferStart_NoIT)
</UL>
<P><STRONG><a name="[b8]"></a>uart_rx_idle_callback</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, drv_uart.o(i.uart_rx_idle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_idle_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_rxDataHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_rxDataHandler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_rxDataHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>ADC_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[d6]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[d5]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f4]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f6]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[f7]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[e7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[69]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[fd]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[fc]"></a>UART_Receive_IT</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1a5]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1a9]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ad]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[71]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1af]"></a>prvInitialiseNewTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1dd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1a2]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1b4]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b5]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[70]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[3]"></a>imu_sensor_check</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, imu_sensor.o(i.imu_sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = imu_sensor_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_sensor.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>imu_sensor_heart_beat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu_sensor.o(i.imu_sensor_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> imu_sensor.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>pid_calculate</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, dji_pid.o(i.pid_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pid_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_pid.o(i.pid_init)
</UL>
<P><STRONG><a name="[6d]"></a>pid_param_init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, dji_pid.o(i.pid_param_init))
<BR>[Address Reference Count : 1]<UL><LI> dji_pid.o(i.pid_init)
</UL>
<P><STRONG><a name="[6e]"></a>pid_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dji_pid.o(i.pid_reset))
<BR>[Address Reference Count : 1]<UL><LI> dji_pid.o(i.pid_init)
</UL>
<P><STRONG><a name="[7]"></a>rc_sensor_check</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rc_sensor.o(i.rc_sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_sensor_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_sensor.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>rc_sensor_heart_beat</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rc_sensor.o(i.rc_sensor_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> rc_sensor.o(.data)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
